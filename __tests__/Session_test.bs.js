// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Flash = require("flash");
var Express = require("bs-express/src/Express.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Superagent = require("superagent");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ExpressSession = require("express-session");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Pg$NirenoReasonablyTyped = require("../src/Pg.bs.js");
var PgSession$NirenoReasonablyTyped = require("../src/PgSession.bs.js");
var ExpressSession$NirenoReasonablyTyped = require("../src/ExpressSession.bs.js");

function listen(app) {
  return new Promise((function (resolve, reject) {
                var onListen = function (e) {
                  var exit = 0;
                  var val;
                  try {
                    val = e;
                    exit = 1;
                  }
                  catch (raw_e){
                    var e$1 = Caml_js_exceptions.internalToOCamlException(raw_e);
                    return reject(e$1);
                  }
                  if (exit === 1) {
                    return resolve("ok");
                  }
                  
                };
                Express.App[/* listen */19](app, 3000, onListen, /* () */0);
                return /* () */0;
              }));
}

var agent = Superagent.agent();

describe("Session", (function () {
        Jest.beforeAllPromise(undefined, (function (param) {
                var app = Express.express(/* () */0);
                var pool = Pg$NirenoReasonablyTyped.makePool(process.env.db_name_env, process.env.db_user_env, process.env.db_pass_env, process.env.db_host_env, Caml_format.caml_int_of_string(process.env.db_port_env), /* () */0);
                var pgstore = PgSession$NirenoReasonablyTyped.makeStore(ExpressSession, {
                      pool: pool
                    });
                Express.App[/* use */0](app, Curry._1(ExpressSession, {
                          store: pgstore,
                          secret: "secret",
                          resave: false,
                          saveUninitialized: false,
                          cookie: {
                            secure: false,
                            maxAge: 3000
                          }
                        }));
                Express.App[/* use */0](app, Flash());
                Express.App[/* get */4](app, "/flash-test", Express.PromiseMiddleware[/* from */0]((function (_next, req, res) {
                            req.flash("info", "flash-foo");
                            return ExpressSession$NirenoReasonablyTyped.save(req).then((function (param) {
                                          return Promise.resolve(Express.Response[/* redirect */14]("/flash-get", res));
                                        }));
                          })));
                Express.App[/* get */4](app, "/flash-get", Express.Middleware[/* from */5]((function (_next, _req, res) {
                            var match = res.locals.flash;
                            if (match.length !== 1) {
                              return Express.Response[/* sendString */2]("error", res);
                            } else {
                              var hd = match[0];
                              return Express.Response[/* sendString */2](hd.message, res);
                            }
                          })));
                Express.App[/* get */4](app, "/state-test", Express.PromiseMiddleware[/* from */0]((function (_next, req, res) {
                            ExpressSession$NirenoReasonablyTyped.set(req, "foo", "state-foo");
                            return ExpressSession$NirenoReasonablyTyped.save(req).then((function (param) {
                                          return Promise.resolve(Express.Response[/* redirect */14]("/state-get", res));
                                        }));
                          })));
                Express.App[/* get */4](app, "/state-get", Express.Middleware[/* from */5]((function (_next, req, res) {
                            var foo = ExpressSession$NirenoReasonablyTyped.get(req, "foo");
                            return Express.Response[/* sendString */2](foo, res);
                          })));
                return listen(app);
              }));
        Jest.testPromise("keeps flash messages available after redirect", undefined, (function (param) {
                return agent.get("http://localhost:3000/flash-test").then((function (response) {
                              var text = response.text;
                              if (text === "flash-foo") {
                                return Promise.resolve(Jest.pass);
                              } else {
                                return Pervasives.failwith("Expected \'flash-foo\' but got: " + (String(text) + ""));
                              }
                            }));
              }));
        return Jest.testPromise("keeps session state available after redirect", undefined, (function (param) {
                      return agent.get("http://localhost:3000/state-test").then((function (response) {
                                    var text = response.text;
                                    if (text === "state-foo") {
                                      return Promise.resolve(Jest.pass);
                                    } else {
                                      return Pervasives.failwith("Expected \'state-foo\' but got: " + (String(text) + ""));
                                    }
                                  }));
                    }));
      }));

exports.listen = listen;
exports.agent = agent;
/* agent Not a pure module */
